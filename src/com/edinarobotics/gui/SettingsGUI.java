/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingsGUI.java
 *
 * Created on Nov 3, 2011, 9:13:40 PM
 */

package com.edinarobotics.gui;

import com.edinarobotics.data.ConfigFile;
import com.edinarobotics.data.DefaultWorkspace;
import com.edinarobotics.logger.Logger;
import com.edinarobotics.scout.Global;
import java.io.File;

/*
 * @author aoneill
 * @note Made by the Netbeans built-in GUI creator
 */


public class SettingsGUI extends javax.swing.JFrame
{
    // Logger of the class
    private static Logger log = Global.log;
    private static String LOG_TAG = "SettingsGUI";

    // Config file
    private static ConfigFile config = new ConfigFile();

    // Variables set by the User
    private static String selectedWorkspaceDir;
    private static boolean logSetting;

    /**
     * Initializes the Settings GUI
     */
    public SettingsGUI()
    {
        initComponents();
        
        // Read the config Data
        String[] configData = config.configRead();
        
        // Set the variables accordingly
        selectedWorkspaceDir = configData[0];
        logSetting = Boolean.parseBoolean(configData[1]);

        // Update the Workspace path and the log setting
        setWorkspaceDirField(selectedWorkspaceDir);
        setLogBox(logSetting);

        // Initialize the FileChooser
        fileExplorer = new javax.swing.JFileChooser();
        fileExplorer.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        
        // Set the GUI to be visible 
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logCheckBox = new javax.swing.JCheckBox();
        scoutButton = new javax.swing.JButton();
        workspaceDirPanel = new javax.swing.JPanel();
        workspaceDirBox = new javax.swing.JTextField();
        chooseButton = new javax.swing.JButton();
        createWorkspaceBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        logCheckBox.setText("Log Session");
        logCheckBox.setFocusable(false);

        scoutButton.setText("Scout!");
        scoutButton.setFocusable(false);
        scoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoutButtonActionPerformed(evt);
            }
        });

        workspaceDirPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Workspace Directory"));

        workspaceDirBox.setColumns(50);
        workspaceDirBox.setFont(new java.awt.Font("Lucida Grande", 0, 10));
        workspaceDirBox.setFocusable(false);

        chooseButton.setText("Choose ...");
        chooseButton.setFocusable(false);
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        createWorkspaceBox.setText("Create Workspace within selected Folder");
        createWorkspaceBox.setFocusable(false);

        org.jdesktop.layout.GroupLayout workspaceDirPanelLayout = new org.jdesktop.layout.GroupLayout(workspaceDirPanel);
        workspaceDirPanel.setLayout(workspaceDirPanelLayout);
        workspaceDirPanelLayout.setHorizontalGroup(
            workspaceDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(workspaceDirPanelLayout.createSequentialGroup()
                .add(workspaceDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(workspaceDirBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .add(workspaceDirPanelLayout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(createWorkspaceBox)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 136, Short.MAX_VALUE)
                        .add(chooseButton)))
                .addContainerGap())
        );
        workspaceDirPanelLayout.setVerticalGroup(
            workspaceDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(workspaceDirPanelLayout.createSequentialGroup()
                .add(workspaceDirBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(workspaceDirPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(createWorkspaceBox)
                    .add(chooseButton)))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(workspaceDirPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(logCheckBox)
                        .add(97, 97, 97)
                        .add(scoutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(workspaceDirPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(logCheckBox)
                    .add(scoutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method called when the "Scout!" button is pushed
     * @param evt ActionEvent created by the button
     */
    private void scoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoutButtonActionPerformed
        // TODO add your handling code here:

        // Update variable states
        selectedWorkspaceDir = workspaceDirBox.getText();
        logSetting = logCheckBox.isSelected();

        // Hide the GUI
        setVisible(false);

        // Update the Config File
        String[] update = {selectedWorkspaceDir, String.valueOf(logSetting)};
        config.configWrite(update);

        // Update the global Variables
        Global.workspaceDir = selectedWorkspaceDir;
        Global.teamFileDir = selectedWorkspaceDir + "/" + Global.teamFolderName;
        Global.commentFileDir = selectedWorkspaceDir + "/" + Global.commentFolderName;
        Global.logActivate = logSetting;

        // Enable the logger if requested
        log.setEnabled(logSetting);

        // Debug
        log.log();

        // Check to see if the Workspace folder is legit
        DefaultWorkspace defWork = new DefaultWorkspace();
        if(createWorkspaceBox.isSelected() || !defWork.isEverythingPresent())
        {
            log.log(LOG_TAG, "Creating missing files in Workspace Dir");
            defWork.checkWorkspace();
        }
        else
        {
            log.log(LOG_TAG, "Workspace folder checks out");
        }
        
        // Data Entry starts here
        DataEntryGUI dataEntryGUI = new DataEntryGUI();
    }//GEN-LAST:event_scoutButtonActionPerformed

    /**
     * Method called when the User browses for files
     * @param evt ActionEvent produced by the button
     */
    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        // TODO add your handling code here:
        
        // Set the default location for file browsing
        fileExplorer.setCurrentDirectory(new File(System.getProperty("user.dir")));
        
        // Let the user select the file, and store the status to a variable
        int returnVal = fileExplorer.showOpenDialog(this);
        
        // If the User approved their option for Folder selecton
        if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            // Try to update the text box for the location and the variable
            try
            {
                selectedWorkspaceDir = fileExplorer.getSelectedFile().getPath();
                workspaceDirBox.setText(selectedWorkspaceDir);
            }
            catch(Exception e)
            {
                log.log(LOG_TAG, "Could not set teamDirLocation Field!");
            }
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    /**
     * Sets the workspace location text box
     * @param dirPath the location to be written to the text box
     */
    private void setWorkspaceDirField(String dirPath)
    {
        // Update the textbox and the variable
        selectedWorkspaceDir = dirPath;
        workspaceDirBox.setText(selectedWorkspaceDir);
    }

    /**
     * Sets the state of the log enabled based on the passed in state
     * @param state the value to be written to the check box
     */
    private void setLogBox(boolean state)
    {
        // Update the check box and the variable
        logSetting = state;
        logCheckBox.setSelected(logSetting);
    }

    /**
     * Main runnable function in this GUI
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseButton;
    private javax.swing.JCheckBox createWorkspaceBox;
    private javax.swing.JCheckBox logCheckBox;
    private javax.swing.JButton scoutButton;
    private javax.swing.JTextField workspaceDirBox;
    private javax.swing.JPanel workspaceDirPanel;
    // End of variables declaration//GEN-END:variables

    // File Chooser variable
    private javax.swing.JFileChooser fileExplorer;
}
